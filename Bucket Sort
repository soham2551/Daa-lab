#include <stdio.h>
#include <stdlib.h>

#define BUCKET_SIZE 10 // Define the number of buckets

// Function to perform insertion sort on a bucket
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        // Move elements of arr[0..i-1], that are greater than key,
        // to one position ahead of their current position
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// Function to perform bucket sort
void bucketSort(float arr[], int n) {
    // Create buckets
    int i;
    int bucketCount[BUCKET_SIZE];
    int bucketIndex[BUCKET_SIZE][n]; // Array of buckets
    for (i = 0; i < BUCKET_SIZE; i++) {
        bucketCount[i] = 0; // Initialize bucket counts
    }

    // Distribute input array values into buckets
    for (i = 0; i < n; i++) {
        int bucketIndex = (int)(arr[i] * BUCKET_SIZE); // Determine bucket index
        if (bucketIndex >= BUCKET_SIZE) {
            bucketIndex = BUCKET_SIZE - 1; // Handle edge case
        }
        bucketIndex[bucketIndex][bucketCount[bucketIndex]++] = arr[i]; // Add to bucket
    }

    // Sort individual buckets and concatenate
    int index = 0;
    for (i = 0; i < BUCKET_SIZE; i++) {
        if (bucketCount[i] > 0) {
            insertionSort(bucketIndex[i], bucketCount[i]); // Sort the bucket
            for (int j = 0; j < bucketCount[i]; j++) {
                arr[index++] = bucketIndex[i][j]; // Concatenate sorted buckets
            }
        }
    }
}

int main() {
    int size;

    // Take user input for the size of the array
    printf("Enter the number of elements: ");
    scanf("%d", &size);

    // Allocate memory for the array
    float *arr = (float *)malloc(size * sizeof(float));

    // Take user input for the elements of the array
    printf("Enter the elements (floating-point numbers between 0 and 1):\n");
    for (int i = 0; i < size; i++) {
        scanf("%f", &arr[i]);
    }

    // Perform bucket sort
    bucketSort(arr, size);

    // Print the sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < size; i++) {
        printf("%.2f ", arr[i]);
    }
    printf("\n");

    // Free the allocated memory for the array
    free(arr);

    return 0;
}
